# Copyright Joop Ringelberg 2022

scopeName: source.arc
fileTypes: .arc
name: ARC

# Fragments to use:
repository:
  strings: 
    name: string.quoted.double.arc
    begin: \"
    end: \"
    patterns: 
      name: constant.character.escape.arc
      match: \.

  ###
  ### COMMENTS
  ###
  comments:
    patterns:

      - name: comment.line.double-dash
        begin: (^[ \t]+)?(?=--+\s+\|)
        end: (?!\G)
        beginCaptures:
          1: 
            name: 'punctuation.whitespace.comment.leading'
        patterns:
            name: 'comment.line.double-dash.documentation'
            begin: (--+)\s+(\|)
            end: \n
            beginCaptures:
              1: 
                name: 'punctuation.definition.comment'
              2: 
                name: 'punctuation.definition.comment.documentation'

      ###
      ### Operators may begin with -- as long as they are not
      ### entirely composed of - characters. This means comments can't be
      ### immediately followed by an allowable operator character.
      ###
      - begin: (^[ \t]+)?(?=--+)
        end: (?!\G)
        beginCaptures:
          1: 
            name: 'punctuation.whitespace.comment.leading'
        patterns:
            name: 'comment.line.double-dash'
            begin: --
            end: \n
            beginCaptures:
              0: 
                name: 'punctuation.definition.comment'

      - include: '#block_comment'

  block_comment:
    patterns:
        - name: 'comment.block.documentation'
          begin: \{-\s*\|
          end: -\}
          applyEndPatternLast: 1
          beginCaptures:
            0: 
              name: 'punctuation.definition.comment.documentation'
          endCaptures:
            0: 
              name: 'punctuation.definition.comment.documentation'
          patterns:
            include: '#block_comment'

        - name: 'comment.block'
          begin: \{-
          end: -\}
          applyEndPatternLast: 1
          beginCaptures:
            0: 
              name: 'punctuation.definition.comment'
          patterns:
              include: '#block_comment'

# The rules
patterns: 
  - include: strings
  - include: comments
  - include: block_comment

  ## CONTEXT KINDS
  - name: entity.name.type.contextkind.arc
    match: ^\s*\b(domain|case|party|activity)\b

  ## ROLE KINDS (NOT USER)
  - name: entity.name.type.rolekind.arc
    match: ^\s*\b(external|thing|context)\b
  ### Treat 'extern', the reference to the external role, as a role.
  - name: entity.name.type.rolekind.arc
    match: \bextern\b

  ## USER ROLE IS SPECIAL
  - match: \b(user\s+)(\w+)\b
    captures: 
      1:
        name: entity.name.type.rolekind.arc
      2:
        name: entity.name.type.userrole.arc

  ## PROPERTY
  - name: entity.name.type.property.arc
    match: \bproperty\b

  ## PERSPECTIVE
  - name: entity.other.perspective.arc
    match: \bperspective(\s+(on|of))?\b
  - name: entity.other.perspective.arc
    match: \b(view(?=\s+[\w|:|\$]+\s+verbs)|verbs|props|only|except|defaults|all\s+roleverbs|action)\b

  ## STATE
  - name: keyword.control.state.arc
    match: \bstate\b

  ## ON ENTRY, ON EXIT
  - name: keyword.control.stateTransition.arc
    match: \bon\s+(entry|exit)\b

  ## NOTIFICATION
  # Using captures, no lookbehind is needed:
  - match: \b(notify)(\s+\w+)?\b
    captures:
      1: 
        name: keyword.control.notification.arc
      2:
        name: entity.name.type.userrole.arc

  ## AUTOMATIC ACTION
  ### User in `do for user` gets the role coloring.
  - match: \b(do)(\s+for\s+)?(\w+)?\b
    captures:
      1: 
        name: keyword.control.automaticAction.arc
      2: 
        name: keyword.control.automaticAction.arc
      3: 
        name: entity.name.type.userrole.arc

  ## BOOLEAN
  - name: constant.language.boolean.arc
    match: true|false
  
  ## STRINGS ARE IN REPOSITORY

  ## DATE
  - name: constant.other.date.arc
    # match: \'([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?\''
    match: \'[\d|\-]+\'

  ## NUMBER
  - name: constant.numeric.arc
    match: \b\d+\b
  
  ## REGULAR EXPRESSION
  - name: string.regexp.arc
    match: \\.*\\

  ## OPERATORS
  # alphabetic operators (without `filter`).
  - name: keyword.operator.arc
    match: \b(either|both|binds|matches|and|or|not|exists|available|boundBy|binder|context)\b
  # special pattern for `with` in `filter ... with`
  - match: \b(filter)(.*)(with)\b
    captures:
      1: 
        name: keyword.operator.arc
      3:
        name: keyword.operator.arc
  # non-alphabetic operators
  - name: keyword.operator.arc
    match: \>\>\=|\>\>|\*|\/|\+|\-|\=\=|\>\=|\<|>\=|>

  ## STANDARD VARIABLES
  - name: variable.language.arc
    match: \b(currentcontext|nofifieduser|origin|currentactor)\b

  ## PROPERTY FACETS
  - name: entity.other.propertyfacet.arc
    match: \b(mandatory|relational|minLength|maxLength|enumeration|pattern|maxInclusive|minInclusive)\b

  ## PROPERTY RANGE
  - name: entity.other.propertyrange.arc
    match: \b(String|Number|Boolean|DateTime)\b
    
  ## ROLEVERBS
  - name: entity.other.roleverb.arc
    match: \b(Remove|Delete|Create|CreateAndFill|Fill|Unbind|RemoveFiller|Move)\b


  ## PROPERTYVERBS
  - name: entity.other.propertyverb.arc
    match: \b(RemovePropertyValue|DeleteProperty|AddPropertyValue|SetPropertyValue|Consult)\b

  ## ASSIGNMENT
  ### remove role/context from <expr>
  - match: \b(remove\s+)(role|context)\b
    captures: 
      1:
        name: keyword.control.other.assignment.arc
      2:
        name: keyword.control.other.assignment.arc
  ### create role RoleType [in <contextExpression>]
  - match: \b(create\s+role\s+)(\w+)(\s+in\b)?
    captures:
      1:
        name: keyword.control.other.assignment.arc
      2: 
        name: entity.name.type.rolekind.arc
      3:
        name: keyword.control.other.assignment.arc
  ### delete role roleType from <context-expression>
  - match: \b(delete\s+role\s+)(\w+)(\s+from)\b
    captures: 
      1:
        name: keyword.control.other.assignment.arc
      2: 
        name: entity.name.type.rolekind.arc
      3:
        name: keyword.control.other.assignment.arc

  # VIEW

  # ASPECT

  # USE

  # FILLEDBY

  # INDEXED

  # LETA, LETE
  